# -*- coding: utf-8 -*-
"""DS_Project_Dataset3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AG1SsiMyTs0-NEfIg9HrZv6frJ_k6uYo

#Importing
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O

# Commented out IPython magic to ensure Python compatibility.

import os
print(os.listdir("/content"))
import pandas as pd
from io import StringIO
import io
import string
import random
import json
import pickle
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from scipy import stats
from scipy.stats import norm

# Any results you write to the current directory are saved as output.

pip install --user boto3

# Load train data
train = pd.read_csv('/content/train (1).csv', nrows=100000)

# Load test data
test = pd.read_csv('/content/test (1).csv', nrows=100000)

train.head()

train.columns

train.info()

"""#Preprocessing

To clean and pre-process the data and perform exploratory analysis to get some interesting insights into the process of choosing a hotel.

1. Remove the users who did not booked the hotel

2. Identify the searches by each user belonging to a specific type of destination

3. orig_destination_distance contains Nan values

4. The check-in and check-out dates to find the duration of the stay for each of the entries in the training set.
"""

# Check the percentage of Nan in dataset
total = train.isnull().sum().sort_values(ascending=False)
percent = (train.isnull().sum()/train['hotel_country'].count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data.head(20)

"""Cleaning the Data"""

train.info()

"""**Adding Extra Features**<br>
Extract relevant information from date columns

**Additional attributes**
<ul>
  <li>stay_dur: number of duration of stay
  <li>no_of_days_bet_booking: number of days between the booking and
  <li>Cin_day: Check-in day
  <li>Cin_month: Check-in month
  <li>Cin_year: Check-out year
"""

# Function to convert date object into relevant attributes
def convert_date_into_days(df):
    df['srch_ci'] = pd.to_datetime(df['srch_ci'])
    df['srch_co'] = pd.to_datetime(df['srch_co'])
    df['date_time'] = pd.to_datetime(df['date_time'])
    
    df['stay_dur'] = (df['srch_co'] - df['srch_ci']).astype('timedelta64[D]')
    df['no_of_days_bet_booking'] = (df['srch_ci'] - df['date_time']).astype('timedelta64[D]')
    
    # For hotel check-in
    # Month, Year, Day
    df['Cin_day'] = df["srch_ci"].apply(lambda x: x.day)
    df['Cin_month'] = df["srch_ci"].apply(lambda x: x.month)
    df['Cin_year'] = df["srch_ci"].apply(lambda x: x.year)

convert_date_into_days(train)

train.info()

total = train.isnull().sum().sort_values(ascending=False)
percent = (train.isnull().sum()/train['hotel_country'].count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data

"""Fill nan with the day which has max occurence"""

train['Cin_day'] = train['Cin_day'].fillna(26.0)
train['Cin_month'] = train['Cin_month'].fillna(8.0)
train['Cin_year'] = train['Cin_year'].fillna(2014.0)
train['stay_dur'] = train['stay_dur'].fillna(1.0)
train['no_of_days_bet_booking'] = train['no_of_days_bet_booking'].fillna(0.0)

"""Fill average values in place for nan, fill with mean"""

train['orig_destination_distance'].fillna(train['orig_destination_distance'].mean(), inplace=True)

train.head()

"""Removing datetime object from the dataset"""

user_id = train['user_id']
columns = ['date_time', 'srch_ci', 'srch_co','user_id','srch_destination_type_id','srch_destination_id']
train.drop(columns=columns,axis=1,inplace=True)

train.info()